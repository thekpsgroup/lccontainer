---
const interests = ["Buy - 20'","Buy - 40'","Buy - 40' High Cube","Lease","Custom Build","Not sure"];
---

<div class="glass p-6 md:p-8" role="form" aria-labelledby="quote-title">
  <h2 id="quote-title" class="text-2xl font-semibold mb-2">Get a Free Quote</h2>
  <p class="text-sm text-ink-muted">We'll reply within 24 hours. No hidden fees.</p>

  <form id="quoteForm" class="grid gap-4 mt-4" action="https://formsubmit.co/info@lccontainer.com" method="POST" novalidate>
    <!-- honeypot + timer -->
    <input type="text" name="website" tabindex="-1" autocomplete="off" class="hidden" aria-hidden="true" />
    <input type="hidden" name="startedAt" id="startedAt" />

    <!-- FormSubmit configuration -->
    <input type="hidden" name="_subject" value="New Quote Request from LC Container Website" />
    <input type="hidden" name="_captcha" value="false" />
    <input type="hidden" name="_template" value="table" />
    <input type="hidden" name="_next" value="https://lccontainer.com/contact?submitted=true" />

    <!-- stepper -->
    <ol class="flex items-center gap-2 text-xs" role="progressbar" aria-label="Quote form progress" aria-valuenow="1" aria-valuemin="1" aria-valuemax="4">
      <li id="label-1" class="px-3 py-1 rounded-xl bg-brand-red text-white" aria-current="step">1. Contact</li>
      <li id="label-2" class="px-3 py-1 rounded-xl bg-white/5 border border-brand-line opacity-60">2. Need</li>
      <li id="label-3" class="px-3 py-1 rounded-xl bg-white/5 border border-brand-line opacity-60">3. Delivery</li>
      <li id="label-4" class="px-3 py-1 rounded-xl bg-white/5 border border-brand-line opacity-60">4. Confirm</li>
    </ol>

    <!-- Step 1 -->
    <fieldset class="step" data-step="1">
      <label class="block text-sm" for="name">Full Name
        <input id="name" name="name" required autocomplete="name" aria-describedby="name-help" class="mt-1 w-full px-4 py-4 rounded-xl bg-white/5 border border-brand-line focus:outline-none focus:ring-2 focus:ring-brand-silver/60 transition-colors duration-200 text-base" />
      </label>
      <div id="name-help" class="sr-only">Enter your full name for the quote request</div>

      <label class="block text-sm" for="email">Email
        <input id="email" name="email" type="email" required autocomplete="email" aria-describedby="email-help" class="mt-1 w-full px-4 py-4 rounded-xl bg-white/5 border border-brand-line focus:outline-none focus:ring-2 focus:ring-brand-silver/60 transition-colors duration-200 text-base" />
      </label>
      <div id="email-help" class="sr-only">We'll use this email to send your quote and updates</div>

      <label class="block text-sm" for="phone">Phone
        <input id="phone" name="phone" required autocomplete="tel" inputmode="tel" aria-describedby="phone-help" class="mt-1 w-full px-4 py-4 rounded-xl bg-white/5 border border-brand-line focus:outline-none focus:ring-2 focus:ring-brand-silver/60 transition-colors duration-200 text-base" />
      </label>
      <div id="phone-help" class="sr-only">We'll call you within 24 hours to discuss your container needs</div>
    </fieldset>

    <!-- Step 2 -->
    <fieldset class="step hidden" data-step="2">
        <label class="block text-sm" for="interest">What do you need?
          <select id="interest" name="interest" required aria-describedby="interest-help" class="mt-1 w-full px-4 py-4 rounded-xl bg-white/5 border border-brand-line focus:outline-none focus:ring-2 focus:ring-brand-silver/60 transition-colors duration-200 text-base">
            <option value="">Select an option</option>
            {interests.map(i => <option value={i}>{i}</option>)}
          </select>
        </label>
        <div id="interest-help" class="sr-only">Choose the type of container service you're interested in</div>
      </fieldset>

    <!-- Step 3 -->
    <fieldset class="step hidden" data-step="3">
      <label class="block text-sm" for="zip">Delivery ZIP
        <input id="zip" name="zip" placeholder="e.g., 75141" required inputmode="numeric" pattern="\\d{5}" aria-describedby="zip-help" maxlength="5" class="mt-1 w-full px-4 py-4 rounded-xl bg-white/5 border border-brand-line focus:outline-none focus:ring-2 focus:ring-brand-silver/60 transition-colors duration-200 text-base" />
      </label>
      <div id="zip-help" class="sr-only">Enter your 5-digit ZIP code for delivery estimate</div>

      <label class="block text-sm" for="notes">Notes (optional)
        <textarea id="notes" name="notes" rows="3" placeholder="Site conditions, timeframe, add-ons needed…" aria-describedby="notes-help" class="mt-1 w-full px-4 py-4 rounded-xl bg-white/5 border border-brand-line focus:outline-none focus:ring-2 focus:ring-brand-silver/60 transition-colors duration-200 text-base"></textarea>
      </label>
      <div id="notes-help" class="sr-only">Any additional details about your container requirements</div>
    </fieldset>

    <!-- Step 4 -->
    <section class="step hidden" data-step="4">
      <div class="text-sm text-ink-muted">We'll review your info and send a quote within 24 hours.</div>
    </section>

    <!-- Controls -->
    <div class="flex gap-3 mt-1">
      <button type="button" id="prevBtn" class="hidden px-5 py-3 rounded-xl border border-brand-line text-ink hover:bg-white/5 transition-colors duration-200 focus:ring-2 focus:ring-brand-silver/60" aria-label="Go back to previous step">
        Back
      </button>
      <button type="button" id="nextBtn" class="px-5 py-3 rounded-xl bg-brand-red text-white font-semibold hover:opacity-90 transition-opacity duration-200 focus:ring-2 focus:ring-brand-silver/60" aria-label="Continue to next step">
        Next
      </button>
      <button type="submit" id="submitBtn" class="hidden px-5 py-3 rounded-xl bg-brand-red text-white font-semibold hover:opacity-90 transition-opacity duration-200 focus:ring-2 focus:ring-brand-silver/60" aria-label="Submit your quote request" disabled>
        <span id="submitText">Submit Quote Request</span>
        <span id="submitLoading" class="hidden" aria-live="polite">Sending your request...</span>
      </button>
    </div>

    <p id="formMsg" class="text-sm text-ink-muted mt-1 flex items-center gap-2" role="status" aria-live="polite">
      <span id="errorIcon" class="hidden text-red-500" aria-hidden="true">⚠️</span>
      <span id="errorText"></span>
    </p>
  </form>
</div>

<script>
  // Performance optimization: Debounce function
  function debounce(func: (...args: any[]) => any, wait: number) {
    let timeout: ReturnType<typeof setTimeout> | undefined;
    return function executedFunction(...args: any[]) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  // init
  const steps = /** @type {NodeListOf<HTMLElement>} */(document.querySelectorAll('.step'));
  const labels = [1,2,3,4].map(i => document.getElementById('label-'+i));
  const nextBtn = document.getElementById('nextBtn') as HTMLButtonElement;
  const prevBtn = document.getElementById('prevBtn') as HTMLButtonElement;
  const submitBtn = document.getElementById('submitBtn') as HTMLButtonElement;
  const submitText = document.getElementById('submitText') as HTMLElement;
  const submitLoading = document.getElementById('submitLoading') as HTMLElement;
  const form = /** @type {HTMLFormElement} */(document.getElementById('quoteForm'));
  const msg = document.getElementById('formMsg') as HTMLElement;
  const errorIcon = document.getElementById('errorIcon') as HTMLElement;
  const errorText = document.getElementById('errorText') as HTMLElement;
  const startedAt = document.getElementById('startedAt') as HTMLInputElement;

  // Initialize form
  if (startedAt) {
    startedAt.value = String(Date.now());
  }
  let current = 0;
  let isSubmitting = false;

  function showStep(i: number) {
    steps.forEach((s,idx)=> s.classList.toggle('hidden', idx!==i));
    labels.forEach((l,idx)=> l?.classList.toggle('opacity-60', idx>i));
    prevBtn.classList.toggle('hidden', i===0);
    nextBtn.classList.toggle('hidden', i===steps.length-1);
    submitBtn.classList.toggle('hidden', i!==steps.length-1);

    // Focus management for accessibility
    const focusableElement = steps[i].querySelector('input,select,textarea') as HTMLElement;
    if (focusableElement) {
      setTimeout(() => focusableElement.focus(), 100);
    }
  }
  showStep(current);

  function setLoading(loading: boolean) {
    isSubmitting = loading;
    if (loading) {
      if (submitText) submitText.classList.add('hidden');
      if (submitLoading) submitLoading.classList.remove('hidden');
      if (submitBtn) submitBtn.disabled = true;
      if (nextBtn) nextBtn.disabled = true;
      if (prevBtn) prevBtn.disabled = true;
    } else {
      if (submitText) submitText.classList.remove('hidden');
      if (submitLoading) submitLoading.classList.add('hidden');
      if (submitBtn) submitBtn.disabled = false;
      if (nextBtn) nextBtn.disabled = false;
      if (prevBtn) prevBtn.disabled = false;
    }
  }

    function validateStep(i: number){
      // Check if form exists
      if (!form) return "Form not found";

      // Enhanced validation with better error messages
      if(i===0){
      const name = form.elements.namedItem('name');
      const email = form.elements.namedItem('email');
      const phone = form.elements.namedItem('phone');

      if(!name.value || !email.value || !phone.value) return "Please fill in all required fields.";
      if(!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(email.value)) return "Please enter a valid email address.";
      if(!/^[\+]?[1-9][\d]{0,15}$/.test(phone.value.replace(/\D/g,''))) return "Please enter a valid phone number.";
      }
      if(i===1){
        const interest = form.elements.namedItem('interest');
        if(!interest.value) return "Please select what you need.";
      }
      if(i===2){
        const zip = form.elements.namedItem('zip');
        if(!/^\d{5}$/.test(zip.value)) return "Please enter a valid 5-digit ZIP code.";
      }
      return null;
  }

  // Debounced error clearing
  const clearError = debounce(() => {
    if (errorText.textContent && !errorText.textContent.includes('Thanks!')) {
      errorText.textContent = '';
      errorIcon.classList.add('hidden');
      msg.classList.remove('text-red-500');
      msg.classList.add('text-ink-muted');
    }
  }, 3000);

  nextBtn.addEventListener('click', ()=>{
    if (isSubmitting) return;

    const err = validateStep(current);
    if(err){
      errorText.textContent = err;
      errorIcon.classList.remove('hidden');
      msg.classList.remove('text-ink-muted');
      msg.classList.add('text-red-500');
      clearError();
      return;
    }
    if(current < steps.length-1){
      current++;
      showStep(current);
      errorText.textContent="";
      errorIcon.classList.add('hidden');
      msg.classList.remove('text-red-500');
      msg.classList.add('text-ink-muted');
    }
  });

  prevBtn.addEventListener('click', ()=>{
    if (isSubmitting) return;

    if(current>0){
      current--;
      showStep(current);
      errorText.textContent="";
      errorIcon.classList.add('hidden');
      msg.classList.remove('text-red-500');
      msg.classList.add('text-ink-muted');
    }
  });

  form.addEventListener('submit', async (e)=>{
    // Don't prevent default - let FormSubmit handle the submission
    if (isSubmitting) {
      e.preventDefault();
      return;
    }

    setLoading(true);
    errorText.textContent = "Sending…";
    errorIcon.classList.add('hidden');
    msg.classList.remove('text-red-500');
    msg.classList.add('text-ink-muted');

    // Enhanced analytics tracking
    const fd = new FormData(form);
    const payload = Object.fromEntries(fd.entries());
    window.dataLayer = window.dataLayer || [];
    window.dataLayer.push({
      event: "quote_submit",
      interest: payload.interest,
      zip: payload.zip,
      timestamp: Date.now()
    });

    // FormSubmit will handle the redirect and success messaging
  });

  // Show success message function
  function showSuccessMessage() {
    const successEvent = new CustomEvent('showSuccessMessage', {
      detail: {
        title: 'Quote Request Submitted!',
        message: 'Thanks! We\'ll call you within 24h. If you don\'t hear from us, please call (214) 524-4168.'
      }
    });
    document.dispatchEvent(successEvent);
  }

  // Prefill from URL with error handling
  try {
    const params = new URLSearchParams(location.search);
    const interestEl = form?.elements?.namedItem?.('interest');
    const zipEl = form?.elements?.namedItem?.('zip');

    if (interestEl && params.get('interest')) {
      [...interestEl.options].forEach(o => {
        if (o.value === params.get('interest')) o.selected = true;
      });
    }
    if (zipEl && params.get('zip')) {
      zipEl.value = params.get('zip');
    }
  } catch (error) {
    if (import.meta.env.DEV) {
      console.error('URL parameter parsing error:', error);
    }
  }
</script>
