---
import { INVENTORY } from "../data/inventory";

// Group containers by size
const containersBySize = {
  "10'": INVENTORY.filter(item => item.size === "10'"),
  "20'": INVENTORY.filter(item => item.size === "20'"),
  "40'": INVENTORY.filter(item => item.size === "40'")
};

// Define expected photo patterns for each size
const expectedPatterns = {
  "10'": ['10-ft.jpg'],
  "20'": ['20ft_'],
  "40'": ['40ft_', '40-ft.jpg']
};

// Validate photo usage
const validationResults = [];

Object.entries(containersBySize).forEach(([size, containers]) => {
  containers.forEach(container => {
    const primaryPhoto = container.photos[0];
    const filename = primaryPhoto.split('/').pop();

    // Check if primary photo matches expected pattern
    const expectedPatternsForSize = expectedPatterns[size];
    const matchesExpected = expectedPatternsForSize.some(pattern =>
      filename.includes(pattern)
    );

    validationResults.push({
      container: container.title,
      size: container.size,
      filename: filename,
      primaryPhoto: primaryPhoto,
      matchesExpected: matchesExpected,
      status: matchesExpected ? 'correct' : 'mismatch',
      expectedPatterns: expectedPatternsForSize
    });
  });
});

// Group by status
const correctPhotos = validationResults.filter(r => r.status === 'correct');
const mismatchedPhotos = validationResults.filter(r => r.status === 'mismatch');
---

<div class="max-w-[1400px] mx-auto px-5 py-8">
  <div class="mb-8">
    <h2 class="text-3xl font-bold mb-4">üñºÔ∏è Container Photo Validation</h2>
    <p class="text-lg text-ink-muted">
      Ensuring each container size displays the correct photos and fits properly
    </p>
  </div>

  <!-- Validation Summary -->
  <div class="grid md:grid-cols-4 gap-6 mb-8">
    <div class="glass p-6 text-center">
      <div class="text-4xl mb-2">üìè</div>
      <div class="text-3xl font-bold text-brand-red">{validationResults.length}</div>
      <div class="text-sm text-ink-muted">Total Containers</div>
    </div>

    <div class="glass p-6 text-center">
      <div class="text-4xl mb-2">‚úÖ</div>
      <div class="text-3xl font-bold text-green-600">{correctPhotos.length}</div>
      <div class="text-sm text-ink-muted">Correct Photos</div>
    </div>

    <div class="glass p-6 text-center">
      <div class="text-4xl mb-2">‚ö†Ô∏è</div>
      <div class="text-3xl font-bold text-yellow-600">{mismatchedPhotos.length}</div>
      <div class="text-sm text-ink-muted">Needs Review</div>
    </div>

    <div class="glass p-6 text-center">
      <div class="text-4xl mb-2">üéØ</div>
      <div class="text-3xl font-bold text-blue-600">
        {Math.round((correctPhotos.length / validationResults.length) * 100)}%
      </div>
      <div class="text-sm text-ink-muted">Accuracy Rate</div>
    </div>
  </div>

  <!-- Size-by-Size Validation -->
  <div class="space-y-8">
    {Object.entries(containersBySize).map(([size, containers]) => (
      <div class="glass p-6">
        <div class="flex items-center gap-4 mb-6">
          <div class="text-4xl font-bold text-brand-red">{size}</div>
          <div>
            <h3 class="text-xl font-semibold">{size} Containers</h3>
            <p class="text-ink-muted">{containers.length} containers ‚Ä¢ Expected: {expectedPatterns[size].join(' or ')}</p>
          </div>
        </div>

        <div class="grid md:grid-cols-2 gap-6">
          {containers.map(container => {
            const validation = validationResults.find(r => r.container === container.title);
            const filename = validation.filename;
            const isCorrect = validation.matchesExpected;

            return (
              <div class={`p-4 rounded-lg border-2 ${isCorrect ? 'border-green-500 bg-green-50 dark:bg-green-900/20' : 'border-yellow-500 bg-yellow-50 dark:bg-yellow-900/20'}`}>
                <div class="flex items-start gap-3 mb-3">
                  <div class="text-2xl">{isCorrect ? '‚úÖ' : '‚ö†Ô∏è'}</div>
                  <div class="flex-1">
                    <h4 class="font-semibold text-sm">{container.title}</h4>
                    <p class="text-xs text-ink-muted">Primary photo: {filename}</p>
                    {isCorrect ? (
                      <p class="text-xs text-green-600">‚úì Correct size photo</p>
                    ) : (
                      <div>
                        <p class="text-xs text-yellow-600">‚ö†Ô∏è Expected: {validation.expectedPatterns.join(' or ')}</p>
                      </div>
                    )}
                  </div>
                </div>

                <div class="aspect-square bg-gray-100 rounded overflow-hidden">
                  <img
                    src={container.photos[0]}
                    alt={`${container.title} container`}
                    class="w-full h-full object-cover"
                    loading="lazy"
                  />
                </div>

                <div class="mt-3">
                  <p class="text-xs text-ink-muted font-medium">Alt Text:</p>
                  <p class="text-xs bg-black/10 p-2 rounded">
                    {`${container.title} - ${container.size} ${container.height} ${container.condition} container`}
                  </p>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    ))}
  </div>

  <!-- Issues & Recommendations -->
  {mismatchedPhotos.length > 0 && (
    <div class="mt-8 glass p-6 border-l-4 border-yellow-500">
      <h3 class="text-xl font-semibold mb-4 text-yellow-600">‚ö†Ô∏è Photo Mismatches Found</h3>
      <div class="space-y-3">
        {mismatchedPhotos.map(mismatch => (
          <div class="p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded">
            <h4 class="font-medium">{mismatch.container}</h4>
            <p class="text-sm text-yellow-700 dark:text-yellow-300">
              Using: <code>{mismatch.filename}</code><br>
              Expected: <code>{mismatch.expectedPatterns.join(' or ')}</code>
            </p>
          </div>
        ))}
      </div>

      <div class="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded">
        <h4 class="font-medium text-blue-700 dark:text-blue-300">üí° Recommendation:</h4>
        <p class="text-sm text-blue-600 dark:text-blue-400">
          Update the inventory data to use photos that match the container size for better accuracy.
        </p>
      </div>
    </div>
  )}

  <!-- Success Message -->
  {mismatchedPhotos.length === 0 && (
    <div class="mt-8 glass p-6 border-l-4 border-green-500">
      <div class="flex items-center gap-3">
        <div class="text-2xl">üéâ</div>
        <div>
          <h3 class="text-xl font-semibold text-green-600">Perfect Match!</h3>
          <p class="text-ink-muted">
            All container photos are correctly matched to their sizes and will display properly cropped in the square frames.
          </p>
        </div>
      </div>
    </div>
  )}
</div>
