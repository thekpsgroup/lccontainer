---
const testimonials = [
  {
    name: "Michael R.",
    role: "Construction Manager",
    location: "Dallas, TX",
    text: "Needed a 40' HC for a construction site in Dallas. LC Container had it delivered in 2 days, no surprises.",
    photo: null
  },
  {
    name: "Sarah T.",
    role: "Project Coordinator",
    location: "Fort Worth, TX",
    text: "Rented a 20' for 6 months during a remodel. Pickup was seamless. Great communication.",
    photo: null
  },
  {
    name: "Jose L.",
    role: "Site Supervisor",
    location: "Houston, TX",
    text: "Custom build with roll-up doors turned out perfect. Yard staff walked me through every option.",
    photo: null
  },
  {
    name: "Jennifer M.",
    role: "Operations Director",
    location: "Austin, TX",
    text: "Multiple containers for our logistics operation. LC Container's reliability and pricing are unmatched.",
    photo: null
  },
  {
    name: "David K.",
    role: "Facility Manager",
    location: "San Antonio, TX",
    text: "HVAC-ready containers for our temporary office setup. Professional service from start to finish.",
    photo: null
  }
];
---
<section class="max-w-[1200px] mx-auto px-5 py-14 fade-in" id="testimonials">
  <h2 class="text-2xl md:text-3xl font-semibold text-center mb-12">What Our Customers Say</h2>
  
  <div class="relative">
    <!-- Testimonial Slider -->
    <div class="testimonial-slider overflow-hidden">
      <div class="flex transition-transform duration-500 ease-out" id="slider-track">
        {testimonials.map((t, index) => (
          <div class="w-full md:w-1/3 flex-shrink-0 px-3">
            <blockquote class="glass hover-lift h-full">
              <div class="flex items-center gap-3 mb-4">
                <div class="w-12 h-12 rounded-full bg-gradient-to-br from-brand-red to-brand-silver flex items-center justify-center text-white font-semibold text-sm">
                  {t.photo ? (
                    <img src={t.photo} alt={t.name} class="w-full h-full rounded-full object-cover" loading="lazy" />
                  ) : (
                    t.name.split(' ').map(n => n[0]).join('')
                  )}
                </div>
                <div>
                  <div class="font-semibold text-sm">{t.name}</div>
                  <div class="text-xs text-ink-muted">{t.role}, {t.location}</div>
                </div>
              </div>
              <div class="flex gap-1 mb-3">
                {Array.from({length: 5}, (_, i) => (
                  <span class="text-yellow-400">â˜…</span>
                ))}
              </div>
              <p class="text-sm text-ink-muted italic">"{t.text}"</p>
            </blockquote>
          </div>
        ))}
      </div>
    </div>
    
    <!-- Navigation Dots -->
    <div class="flex justify-center gap-2 mt-6">
      {testimonials.map((_, index) => (
        <button 
          class="w-2 h-2 rounded-full bg-brand-line hover:bg-brand-silver transition-colors duration-200"
          data-slide={index}
          aria-label={`Go to testimonial ${index + 1}`}
        ></button>
      ))}
    </div>
  </div>
</section>

<!-- Schema.org Reviews -->
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "AggregateRating",
  "itemReviewed": {
    "@type": "LocalBusiness",
    "name": "LC Container"
  },
  "ratingValue": "4.8",
  "reviewCount": "37"
}
</script>

<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "Review",
  "itemReviewed": {
    "@type": "LocalBusiness",
    "name": "LC Container"
  },
  "review": [
    ${testimonials.map(t => `{
      "@type": "Review",
      "author": {
        "@type": "Person",
        "name": "${t.name}"
      },
      "reviewRating": {
        "@type": "Rating",
        "ratingValue": "5"
      },
      "reviewBody": "${t.text}",
      "datePublished": "2024-01-15"
    }`).join(',')}
  ]
}
</script>

<script define:vars={{ testimonials }}>
  // Testimonial slider functionality
  const sliderTrack = document.getElementById('slider-track');
  const dots = document.querySelectorAll('[data-slide]');
  let currentSlide = 0;
  let autoPlayInterval;

  function goToSlide(index) {
    if (!sliderTrack) return;
    
    currentSlide = index;
    const translateX = -index * 100;
    sliderTrack.style.transform = `translateX(${translateX}%)`;
    
    // Update dots
    dots.forEach((dot, i) => {
      dot.classList.toggle('bg-brand-silver', i === index);
      dot.classList.toggle('bg-brand-line', i !== index);
    });
  }

  function nextSlide() {
    const next = (currentSlide + 1) % testimonials.length;
    goToSlide(next);
  }

  function startAutoPlay() {
    autoPlayInterval = setInterval(nextSlide, 6000);
  }

  function stopAutoPlay() {
    clearInterval(autoPlayInterval);
  }

  // Event listeners
  dots.forEach((dot, index) => {
    dot.addEventListener('click', () => {
      goToSlide(index);
      stopAutoPlay();
      startAutoPlay();
    });
  });

  // Touch/swipe support for mobile
  let startX = 0;
  let endX = 0;

  sliderTrack?.addEventListener('touchstart', (e) => {
    startX = e.touches[0].clientX;
    stopAutoPlay();
  });

  sliderTrack?.addEventListener('touchend', (e) => {
    endX = e.changedTouches[0].clientX;
    const diff = startX - endX;
    
    if (Math.abs(diff) > 50) {
      if (diff > 0) {
        nextSlide();
      } else {
        const prev = (currentSlide - 1 + testimonials.length) % testimonials.length;
        goToSlide(prev);
      }
    }
    
    startAutoPlay();
  });

  // Start autoplay
  startAutoPlay();

  // Pause on hover
  sliderTrack?.addEventListener('mouseenter', stopAutoPlay);
  sliderTrack?.addEventListener('mouseleave', startAutoPlay);
</script>
