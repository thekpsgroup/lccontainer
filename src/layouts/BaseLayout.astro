---
import OrganizationSchema from "../components/seo/OrganizationSchema.astro";

export interface Props {
  title: string;
  description: string;
  ogImage?: string;
  includeOrganizationSchema?: boolean;
}

const {
  title,
  description,
  ogImage = "/photos/logos/lccontainer-logo-transparent-400.png",
  includeOrganizationSchema = true,
} = Astro.props;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
// Ensure global styles are bundled and loaded on all devices
import "../styles/global.css";
import Analytics from "../components/Analytics.astro";
import ConversionGoals from "../components/ConversionGoals.astro";
import ABTesting from "../components/ABTesting.astro";
import StickyCallBar from "../components/StickyCallBar.astro";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, viewport-fit=cover"
    />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta
      name="apple-mobile-web-app-status-bar-style"
      content="black-translucent"
    />
    <meta name="description" content={description} />
    <link rel="canonical" href={canonicalURL} />

    <!-- Critical Resource Preloading for Core Web Vitals -->
    <link
      rel="preload"
      href="/photos/container/standard/20ft_5.webp"
      as="image"
      fetchpriority="high"
      type="image/webp"
    />
    <link
      rel="preload"
      href="/photos/container/standard/20ft_5.jpg"
      as="image"
      fetchpriority="high"
      type="image/jpeg"
    />
    type="image/jpeg" />

    <!-- DNS prefetch for external resources -->
    <link rel="dns-prefetch" href="//fonts.googleapis.com" />
    <link rel="dns-prefetch" href="//www.google-analytics.com" />
    <link rel="dns-prefetch" href="//va.vercel-scripts.com" />

    <!-- Preconnect to critical origins -->
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

    <!-- Open Graph -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(ogImage, Astro.site)} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:type" content="website" />

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={new URL(ogImage, Astro.site)} />

    <!-- SEO Enhancements -->
    <meta
      name="robots"
      content="index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1"
    />
    <meta
      name="googlebot"
      content="index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1"
    />
    <meta
      name="bingbot"
      content="index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1"
    />
    <meta name="author" content="LC Container, LLC" />
    <meta name="publisher" content="LC Container, LLC" />
    <meta
      name="keywords"
      content="shipping containers, container sales, container leasing, custom containers, container modifications, storage containers, office containers, Texas containers, Hutchins TX"
    />
    <meta name="geo.region" content="US-TX" />
    <meta name="geo.placename" content="Hutchins, Texas" />
    <meta name="geo.position" content="32.6454;-96.7111" />
    <meta name="ICBM" content="32.6454, -96.7111" />

    <!-- Business information -->
    <meta
      name="business:contact_data:street_address"
      content="1211 E Fulghum Rd"
    />
    <meta name="business:contact_data:locality" content="Hutchins" />
    <meta name="business:contact_data:region" content="TX" />
    <meta name="business:contact_data:postal_code" content="75141" />
    <meta name="business:contact_data:country_name" content="United States" />
    <meta name="business:contact_data:phone_number" content="+1-214-524-4168" />

    <!-- Google Search Console Verification -->
    <meta
      name="google-site-verification"
      content="YOUR_VERIFICATION_CODE_HERE"
    />

    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-NNQJTQFJYB"
    ></script>
    <script is:inline>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag("js", new Date());
      gtag("config", "G-NNQJTQFJYB");
    </script>

    <!-- Global stylesheet (bundled by Astro) -->

    <!-- Performance optimizations -->
    <link rel="dns-prefetch" href="https://fonts.googleapis.com" />
    <link rel="dns-prefetch" href="https://fonts.gstatic.com" />
    <link rel="preconnect" href="https://fonts.googleapis.com" crossorigin />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

    <!-- Preload critical fonts -->
    <link
      rel="preload"
      href="https://fonts.gstatic.com/s/inter/v12/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZ9hiJ-Ek-_EeA.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href="https://fonts.gstatic.com/s/inter/v12/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuI6fAZ9hiJ-Ek-_EeA.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />

    <!-- Load fonts stylesheet (Safari/iOS-safe) -->
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
    />

    <!-- Critical CSS inline -->
    <style>
      body {
        background: #0b0b0b;
        color: #ffffff;
        font-family:
          system-ui,
          -apple-system,
          sans-serif;
        margin: 0;
        padding: 0;
      }
      .glass {
        background: rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 12px;
      }
      .bg-brand-red {
        background-color: #b22222;
      }
      .text-brand-red {
        color: #b22222;
      }
      .text-ink {
        color: #ffffff;
      }
      .text-ink-muted {
        color: rgba(255, 255, 255, 0.7);
      }
      .sr-only {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border: 0;
      }
      .fade-in {
        opacity: 0;
        transform: translateY(10px);
        transition:
          opacity 0.4s ease,
          transform 0.4s ease;
      }
      .fade-in.visible {
        opacity: 1;
        transform: translateY(0);
      }
      @media (prefers-reduced-motion: reduce) {
        .fade-in {
          transition: none;
        }
      }
    </style>

    <title>{title}</title>

    <!-- Enhanced Structured Data for SEO -->
    {
      includeOrganizationSchema && (
        <OrganizationSchema includeWebsite={true} includeSocialMedia={true} />
      )
    }
  </head>
  <body class="bg-brand-black text-ink pb-16 md:pb-0">
    <a href="#main" class="skip-link">Skip to content</a>

    <slot name="header" />

    <main id="main">
      <slot />
    </main>

    <slot name="footer" />

    <!-- Analytics -->
    <Analytics />

    <!-- Conversion Goals Tracking -->
    <ConversionGoals />

    <!-- A/B Testing Framework -->
    <ABTesting />

    <!-- Sticky Call Bar for mobile, sitewide -->
    <StickyCallBar />

    <!-- Performance monitoring and essential functionality -->
    <script is:inline>
      // Performance monitoring
      window.addEventListener("load", () => {
        // Measure Core Web Vitals
        try {
          // Web vitals import (optional performance tracking)
          if (typeof window !== "undefined") {
            import("https://unpkg.com/web-vitals@3?module")
              .then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
                getCLS(console.log);
                getFID(console.log);
                getFCP(console.log);
                getLCP(console.log);
                getTTFB(console.log);
              })
              .catch(() => {
                console.debug("Web vitals library not available");
              });
          }
        } catch (error) {
          console.debug("Web vitals error:", error);
        }

        // Service worker registration
        if ("serviceWorker" in navigator) {
          navigator.serviceWorker.register("/sw.js").catch(() => {});
        }
      });

      // Optimized fade-in animation with performance monitoring
      document.addEventListener("DOMContentLoaded", function () {
        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                entry.target.classList.add("visible");
                observer.unobserve(entry.target);
              }
            });
          },
          {
            threshold: 0.1,
            rootMargin: "50px 0px",
          }
        );

        document
          .querySelectorAll(".fade-in")
          .forEach((el) => observer.observe(el));
      });

      // Performance observer for long tasks
      if ("PerformanceObserver" in window) {
        const observer = new PerformanceObserver((list) => {
          for (const entry of list.getEntries()) {
            if (entry.duration > 50) {
              // Log tasks longer than 50ms
              console.log("Long task:", entry);
            }
          }
        });
        observer.observe({ entryTypes: ["longtask"] });
      }

      // Register service worker for performance
      if ("serviceWorker" in navigator) {
        navigator.serviceWorker
          .register("/sw.js")
          .then((registration) => console.log("SW registered:", registration))
          .catch((error) => console.log("SW registration failed:", error));
      }

      // Core Web Vitals monitoring
      const sendWebVitals = (metric) => {
        if (typeof gtag !== "undefined") {
          gtag("event", metric.name, {
            event_category: "Web Vitals",
            event_label: metric.id,
            value: Math.round(
              metric.name === "CLS" ? metric.value * 1000 : metric.value
            ),
            non_interaction: true,
          });
        }
      };

      // Monitor LCP
      new PerformanceObserver((entryList) => {
        for (const entry of entryList.getEntries()) {
          if (entry.startTime < 2500) {
            // Only report good LCP
            sendWebVitals({
              name: "LCP",
              value: entry.startTime,
              id: "lcp-" + Math.random().toString(36).substr(2, 9),
            });
          }
        }
      }).observe({ entryTypes: ["largest-contentful-paint"] });

      // Monitor CLS
      let clsValue = 0;
      let clsEntries = [];
      new PerformanceObserver((entryList) => {
        for (const entry of entryList.getEntries()) {
          if (!entry.hadRecentInput) {
            clsValue += entry.value;
            clsEntries.push(entry);
          }
        }
        if (clsValue < 0.1) {
          // Only report good CLS
          sendWebVitals({
            name: "CLS",
            value: clsValue,
            id: "cls-" + Math.random().toString(36).substr(2, 9),
          });
        }
      }).observe({ entryTypes: ["layout-shift"] });
    </script>
  </body>
</html>
