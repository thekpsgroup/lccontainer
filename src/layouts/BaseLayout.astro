---
export interface Props {
  title: string;
  description: string;
  ogImage?: string;
}

const { title, description, ogImage = "/photos/logos/lccontainer-logo-transparent-400.png" } = Astro.props;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
import "../styles/global.css";
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    <link rel="canonical" href={canonicalURL} />

    <link rel="icon" href="/favicon.ico" />
    <link rel="apple-touch-icon" href="/favicon.png" />

    <!-- Open Graph -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(ogImage, Astro.site)} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:type" content="website" />
    
    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={new URL(ogImage, Astro.site)} />
    
    <title>{title}</title>
    
    <!-- Critical CSS for above-the-fold content -->
    <link rel="stylesheet" href="/styles/critical.css">

    <!-- Global styles -->
    <link rel="stylesheet" href="/styles/global.css">

    <!-- Self-hosted Inter font via @fontsource -->

    <!-- DNS prefetch for external domains -->
    <link rel="dns-prefetch" href="https://lccontainer.com">
    <link rel="dns-prefetch" href="https://thekpsgroup.com">
    <link rel="dns-prefetch" href="https://modernconsulting.co">
    <link rel="dns-prefetch" href="https://modernbrands.co">
  </head>
  <body class="bg-brand-black text-ink pb-16 md:pb-0">
    <!-- Skip to content link for accessibility -->
    <a href="#main-content" class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-brand-red text-white px-4 py-2 rounded z-50">
      Skip to main content
    </a>

    <main id="main-content">
      <slot />
    </main>

    <!-- Optimized JavaScript loading -->
    <script>
      // Performance monitoring
      if ('PerformanceObserver' in window) {
        const observer = new PerformanceObserver((list) => {
          for (const entry of list.getEntries()) {
            if (entry.entryType === 'largest-contentful-paint') {
              if (import.meta.env.DEV) {
                console.log('LCP:', entry.startTime);
              }
            }
          }
        });
        observer.observe({ entryTypes: ['largest-contentful-paint'] });
      }

      // Service worker registration
      if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
          navigator.serviceWorker.register('/sw.js')
            .then(registration => {
              if (import.meta.env.DEV) {
                console.log('SW registered');
              }
            })
            .catch(error => {
              if (import.meta.env.DEV) {
                console.log('SW registration failed');
              }
            });
        });
      }

      // Intersection Observer for fade-in animations
      if ('IntersectionObserver' in window) {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add('visible');
              observer.unobserve(entry.target);
            }
          });
        }, { threshold: 0.1 });

        document.addEventListener('DOMContentLoaded', () => {
          const fadeElements = document.querySelectorAll('.fade-in');
          fadeElements.forEach(el => observer.observe(el));
        });
      }

      // Image loading optimization
      document.addEventListener('DOMContentLoaded', () => {
        const images = document.querySelectorAll('img[loading="lazy"]');
        if ('IntersectionObserver' in window) {
          const imageObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                const img = entry.target;
                img.src = img.dataset.src || img.src;
                imageObserver.unobserve(img);
              }
            });
          });
          images.forEach(img => imageObserver.observe(img));
        }
      });
    </script>
  </body>
</html>
