---
import BaseLayout from "../layouts/BaseLayout.astro";
import Header from "../components/Header.astro";
import Lightbox from "../components/Lightbox.astro";
import { INVENTORY, type Item } from "../data/inventory";

const sizes = ["20'","40'"];
const heights = ["Standard","High Cube"];
const conditions = ["New (One-Trip)","Used (WWT)"];
const title = "Inventory â€” LC Container";
const desc = "Browse shipping containers: 20', 40', Standard and High Cube. New and used. Quotes in 24 hours.";
---
<BaseLayout title={title} description={desc}>
  <Header />

  <section class="max-w-[1200px] mx-auto px-5 py-12 md:py-16">
    <h1 class="text-3xl md:text-4xl font-semibold">Inventory</h1>
    <p class="text-ink-muted mt-2">Our 10-acre Hutchins yard carries <strong class="text-brand-red">1,000's of containers</strong> in stock. Filter by size, height, and condition. Transparent pricing; exact quote in 24 hours.</p>

    <!-- Filters -->
    <div class="glass p-4 mt-6 fade-in">
      <form id="filters" class="grid sm:grid-cols-3 gap-3 text-sm">
        <label class="block">Size
          <select name="size" class="mt-1 w-full px-3 py-2 rounded-xl bg-white/5 border border-brand-line">
            <option value="">Any</option>
            {sizes.map(s => <option value={s}>{s}</option>)}
          </select>
        </label>
        <label class="block">Height
          <select name="height" class="mt-1 w-full px-3 py-2 rounded-xl bg-white/5 border border-brand-line">
            <option value="">Any</option>
            {heights.map(h => <option value={h}>{h}</option>)}
          </select>
        </label>
        <label class="block">Condition
          <select name="condition" class="mt-1 w-full px-3 py-2 rounded-xl bg-white/5 border border-brand-line">
            <option value="">Any</option>
            {conditions.map(c => <option value={c}>{c}</option>)}
          </select>
        </label>
      </form>
      <p id="count" class="text-xs text-ink-muted mt-2">Showing {INVENTORY.length} items</p>
    </div>

    <!-- Grid -->
    <div id="grid" class="mt-6 grid sm:grid-cols-2 lg:grid-cols-3 gap-6 fade-in">
      {INVENTORY.map(item => (
        <article class="glass p-0 flex flex-col overflow-hidden hover-lift">
          <button 
            class="relative h-44 bg-[radial-gradient(ellipse_at_center,rgba(178,34,34,.18),transparent_60%)] image-overlay cursor-pointer"
            onClick={`openLightbox(${JSON.stringify({ src: item.photos[0], title: item.title, caption: item.blurb })})`}
            aria-label={`Enlarge ${item.title} image`}
          >
            <img src={item.photos[0]} alt={item.title} class="h-full w-full object-cover" loading="lazy" onerror="this.style.display='none'"/>
          </button>
          <div class="p-6">
            <div class="flex items-center justify-between">
              <h2 class="text-lg font-semibold">{item.title}</h2>
              {item.badge && <span class="text-xs px-2 py-1 rounded-lg bg-white/10 border border-brand-line">{item.badge}</span>}
            </div>
            <p class="text-sm text-ink-muted mt-1">{item.blurb}</p>
            <p class="text-sm text-ink-muted mt-1">From ${item.priceFrom.toLocaleString()}</p>
            <div class="mt-4 flex gap-2">
              <a href={`/inventory/${item.id}`} data-astro-prefetch class="px-3 py-2 rounded-xl border border-brand-line text-sm hover:bg-white/5">View details</a>
              <a href={`/contact?interest=${encodeURIComponent(item.title)}`} data-astro-prefetch class="px-3 py-2 rounded-xl bg-brand-red text-white text-sm font-semibold hover:opacity-90">Get Free Quote</a>
            </div>
          </div>
        </article>
      ))}
    </div>
  </section>

  <Lightbox id="lb" />

  <script>
    const ALL = JSON.parse(String.raw`{ "items": ${JSON.stringify(INVENTORY)} }`).items;
    const f = document.getElementById('filters');
    const grid = document.getElementById('grid');
    const count = document.getElementById('count');
    function render(items){
      grid.innerHTML = items.map(item => `
        <article class="glass p-0 flex flex-col overflow-hidden hover-lift">
          <button 
            class="relative h-44 bg-[radial-gradient(ellipse_at_center,rgba(178,34,34,.18),transparent_60%)] image-overlay cursor-pointer"
            onclick='openLightbox(${JSON.stringify({ src: item.photos?.[0] ?? '', title: item.title, caption: item.blurb })})'
            aria-label="Enlarge ${item.title} image"
          >
            <img src="${item.photos?.[0] ?? ''}" alt="${item.title}" class="h-full w-full object-cover" loading="lazy" onerror="this.style.display='none'"/>
          </button>
          <div class="p-6">
            <div class="flex items-center justify-between">
              <h2 class="text-lg font-semibold">${item.title}</h2>
              ${item.badge ? `<span class="text-xs px-2 py-1 rounded-lg bg-white/10 border border-brand-line">${item.badge}</span>` : ``}
            </div>
            <p class="text-sm text-ink-muted mt-1">${item.blurb}</p>
            <p class="text-sm text-ink-muted mt-1">From $${Number(item.priceFrom).toLocaleString()}</p>
                       <div class="mt-4 flex gap-2">
             <a href="/inventory/${item.id}" data-astro-prefetch class="px-3 py-2 rounded-xl border border-brand-line text-sm hover:bg-white/5">View details</a>
             <a href="/contact?interest=${encodeURIComponent(item.title)}" data-astro-prefetch class="px-3 py-2 rounded-xl bg-brand-red text-white text-sm font-semibold hover:opacity-90">Get Free Quote</a>
           </div>
          </div>
        </article>
      `).join('');
      count.textContent = `Showing ${items.length} item${items.length===1 ? "" : "s"}`;
    }
    function apply(){
      const data = new FormData(f);
      const size = data.get('size') || "";
      const height = data.get('height') || "";
      const condition = data.get('condition') || "";
      let items = ALL;
      if(size) items = items.filter(i => i.size === size);
      if(height) items = items.filter(i => i.height === height);
      if(condition) items = items.filter(i => i.condition === condition);
      render(items);
    }
    f?.addEventListener('change', apply);
    apply();
  </script>
</BaseLayout>
