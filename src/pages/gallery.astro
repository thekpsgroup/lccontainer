---
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { customModifications, standardContainers, yardAndStorage, allImages } from '../data/images';
---

<BaseLayout
  title="Photo Gallery - LC Container | Custom Builds & Container Solutions"
  description="Browse our comprehensive photo gallery showcasing custom container builds, modifications, and our facility. See the quality and craftsmanship of LC Container's work."
>
  <Header />

  <!-- Enhanced Hero Section -->
  <section class="pt-32 pb-20 bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900">
    <div class="content-wrap text-center">
      <h1 class="text-5xl md:text-7xl font-bold text-white mb-8 leading-tight">
        Photo Gallery
      </h1>
      <p class="text-xl md:text-2xl text-slate-200 max-w-4xl mx-auto leading-relaxed">
        Explore our portfolio of custom container builds, modifications, and facility tours.
        Each image showcases our commitment to quality and attention to detail.
      </p>
    </div>
  </section>


  <!-- Gallery Content -->
  <section class="py-24 bg-white dark:bg-slate-900">
    <div class="content-wrap">
      <!-- Gallery Grid -->
      <div id="gallery-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
        {allImages.map((image, index) => {
          // Determine aspect ratio based on image title or alt text
          let ratioClass = 'aspect-[4/3]';
          const title = (image.title || image.alt || '').toLowerCase();
          if (title.includes("40' ") || title.includes('40ft') || title.includes('40-foot') || title.includes('40 foot')) {
            ratioClass = 'aspect-[16/5]';
          } else if (title.includes("20' ") || title.includes('20ft') || title.includes('20-foot') || title.includes('20 foot')) {
            ratioClass = 'aspect-[4/3]';
          } else if (title.includes("10' ") || title.includes('10ft') || title.includes('10-foot') || title.includes('10 foot')) {
            ratioClass = 'aspect-square';
          } else if (image.category && image.category.toLowerCase().includes('custom')) {
            // For custom modifications, default to landscape unless title/alt suggests otherwise
            ratioClass = 'aspect-[4/3]';
          }
          return (
            <div
              class="gallery-item group relative overflow-hidden rounded-3xl shadow-2xl hover:shadow-blue-500/25 transition-all duration-500 transform hover:scale-[1.02] bg-white dark:bg-slate-800 cursor-pointer"
              data-category={image.category.toLowerCase().replace(' ', '-')}
              onclick={`openLightbox(${index})`}
              style={`animation-delay: ${index * 0.1}s`}
            >
              {/* Image Container */}
              <div class={`relative ${ratioClass} overflow-hidden`}>
                <img
                  src={image.src}
                  alt={image.alt}
                  class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-700 ease-out"
                  loading="lazy"
                />
                {/* Overlay */}
                <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-all duration-500">
                  <div class="absolute inset-0 bg-gradient-to-t from-blue-600/20 via-transparent to-transparent"></div>
                </div>
                {/* Category Badge */}
                <div class="absolute top-4 left-4 px-3 py-1 bg-white/90 dark:bg-slate-800/90 backdrop-blur-sm rounded-full text-xs font-semibold text-slate-700 dark:text-slate-200 border border-white/20 dark:border-slate-700/20 opacity-0 group-hover:opacity-100 transform translate-y-2 group-hover:translate-y-0 transition-all duration-300">
                  {image.category}
                </div>
                {/* Zoom Icon */}
                <div class="absolute top-4 right-4 w-10 h-10 bg-white/90 dark:bg-slate-800/90 backdrop-blur-sm rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transform scale-75 group-hover:scale-100 transition-all duration-300">
                  <svg class="w-5 h-5 text-slate-700 dark:text-slate-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7" />
                  </svg>
                </div>
              </div>
              {/* Content Overlay */}
              {(image.title || image.description) && (
                <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/90 via-black/60 to-transparent p-6 transform translate-y-4 group-hover:translate-y-0 transition-transform duration-500">
                  {image.title && (
                    <h3 class="text-white font-bold text-lg mb-2 leading-tight">
                      {image.title}
                    </h3>
                  )}
                  {image.description && (
                    <p class="text-blue-200 text-sm leading-relaxed opacity-0 group-hover:opacity-100 transition-opacity duration-500 delay-100">
                      {image.description}
                    </p>
                  )}
                </div>
              )}
              {/* Hover Border Effect */}
              <div class="absolute inset-0 rounded-3xl border-2 border-transparent group-hover:border-blue-500/30 transition-all duration-300"></div>
            </div>
          );
        })}
      </div>


      <!-- CTA Section -->
      <div class="text-center mt-20">
        <div class="bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-800 dark:to-slate-700 rounded-3xl p-12 shadow-2xl border border-slate-200 dark:border-slate-600">
          <h3 class="text-3xl md:text-4xl font-bold text-slate-900 dark:text-white mb-6">
            Ready to Start Your Project?
          </h3>
          <p class="text-xl text-slate-700 dark:text-slate-200 mb-10 max-w-3xl mx-auto">
            Inspired by what you see? Let's discuss your container project and create something amazing together.
          </p>

          <div class="flex flex-col sm:flex-row gap-6 justify-center">
            <a
              href="/contact"
              class="group relative inline-flex items-center justify-center px-10 py-5 bg-blue-600 text-white text-lg font-semibold rounded-2xl hover:bg-blue-700 shadow-2xl hover:shadow-blue-500/25 transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-500/50"
            >
              <span class="relative z-10">Get Free Quote</span>
              <div class="absolute inset-0 bg-gradient-to-r from-blue-600 to-blue-700 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              <svg class="w-5 h-5 ml-3 group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6" />
              </svg>
            </a>

            <a
              href="tel:214-524-4168"
              class="group relative inline-flex items-center justify-center px-10 py-5 bg-slate-100 dark:bg-slate-600 text-slate-900 dark:text-white text-lg font-semibold rounded-2xl hover:bg-slate-200 dark:hover:bg-slate-500 shadow-2xl hover:shadow-slate-500/25 transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-slate-500/50"
            >
              <span class="relative z-10">Call Now</span>
              <svg class="w-5 h-5 ml-3 group-hover:scale-110 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
              </svg>
            </a>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Lightbox Modal -->
  <div id="lightbox" class="fixed inset-0 bg-black/90 z-50 hidden items-center justify-center p-4">
    <div class="relative max-w-7xl max-h-full">
      <!-- Close Button -->
      <button
        onclick="closeLightbox()"
        class="absolute top-4 right-4 z-10 w-12 h-12 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center text-white hover:bg-white/30 transition-all duration-300"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>

      <!-- Navigation Buttons -->
      <button
        onclick="previousImage()"
        class="absolute left-4 top-1/2 transform -translate-y-1/2 z-10 w-12 h-12 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center text-white hover:bg-white/30 transition-all duration-300"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>

      <button
        onclick="nextImage()"
        class="absolute right-4 top-1/2 transform -translate-y-1/2 z-10 w-12 h-12 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center text-white hover:bg-white/30 transition-all duration-300"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>

      <!-- Main Image -->
      <img id="lightbox-image" src="" alt="" class="max-w-full max-h-full object-contain rounded-2xl shadow-2xl" />

      <!-- Image Info -->
      <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/90 via-black/60 to-transparent p-6 rounded-b-2xl">
        <h3 id="lightbox-title" class="text-white font-bold text-xl mb-2"></h3>
        <p id="lightbox-description" class="text-blue-200 text-sm mb-2"></p>
        <span id="lightbox-category" class="inline-block px-3 py-1 bg-blue-600/80 text-white text-xs font-semibold rounded-full"></span>
      </div>
    </div>
  </div>

  <Footer />
</BaseLayout>

<script define:vars={{ allImages }}>
  // Global variables for lightbox
  let currentImageIndex = 0;
  const galleryImages = allImages;

  // Update navigation buttons
  function updateNavigationButtons(activeCategory) {
    const buttons = document.querySelectorAll('[id^="nav-"]');
    buttons.forEach((btn) => {
      btn.className = 'px-6 py-3 bg-slate-100 dark:bg-slate-700 text-slate-700 dark:text-slate-200 rounded-2xl font-semibold hover:bg-slate-200 dark:hover:bg-slate-600 transition-all duration-300 transform hover:scale-105';
    });

    const activeBtn = document.getElementById(`nav-${activeCategory}`);
    if (activeBtn) {
      activeBtn.className = 'px-6 py-3 bg-blue-600 text-white rounded-2xl font-semibold hover:bg-blue-700 transition-all duration-300 transform hover:scale-105';
    }
  }

  // Lightbox functions
  function openLightbox(index) {
    currentImageIndex = index;
    const lightbox = document.getElementById('lightbox');
    const lightboxImage = document.getElementById('lightbox-image');
    const lightboxTitle = document.getElementById('lightbox-title');
    const lightboxDescription = document.getElementById('lightbox-description');
    const lightboxCategory = document.getElementById('lightbox-category');

    if (lightbox && lightboxImage && lightboxTitle && lightboxDescription && lightboxCategory) {
      const image = galleryImages[index];
      lightboxImage.src = image.src;
      lightboxImage.alt = image.alt;
      lightboxTitle.textContent = image.title || '';
      lightboxDescription.textContent = image.description || '';
      lightboxCategory.textContent = image.category || '';

      lightbox.classList.remove('hidden');
      lightbox.classList.add('flex');
      document.body.style.overflow = 'hidden';
    }
  }

  function closeLightbox() {
    const lightbox = document.getElementById('lightbox');
    if (lightbox) {
      lightbox.classList.add('hidden');
      lightbox.classList.remove('flex');
      document.body.style.overflow = 'auto';
    }
  }

  function nextImage() {
    currentImageIndex = (currentImageIndex + 1) % galleryImages.length;
    openLightbox(currentImageIndex);
  }

  function previousImage() {
    currentImageIndex = (currentImageIndex - 1 + galleryImages.length) % galleryImages.length;
    openLightbox(currentImageIndex);
  }

  // Keyboard navigation
  document.addEventListener('keydown', function(e) {
    const lightbox = document.getElementById('lightbox');
    if (lightbox && !lightbox.classList.contains('hidden')) {
      if (e.key === 'Escape') {
        closeLightbox();
      } else if (e.key === 'ArrowRight') {
        nextImage();
      } else if (e.key === 'ArrowLeft') {
        previousImage();
      }
    }
  });

  // Close lightbox when clicking outside
  document.addEventListener('DOMContentLoaded', function() {
    const lightbox = document.getElementById('lightbox');
    if (lightbox) {
      lightbox.addEventListener('click', function(e) {
        if (e.target === lightbox) {
          closeLightbox();
        }
      });
    }
  });
</script>

<style>
</style>
